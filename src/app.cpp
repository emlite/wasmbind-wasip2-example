// Generated by `wit-bindgen` 0.44.0. DO NOT EDIT!

// Ensure that the *_component_type.o object is linked in
#ifdef __wasm32__
extern "C" void __component_type_object_force_link_app(void);
__attribute__((used))
void __component_type_object_force_link_app_public_use_in_this_compilation_unit(void) {
  __component_type_object_force_link_app();
}
#endif
#include "app_cpp.h"
#include <cstdlib> // realloc

extern "C" void *cabi_realloc(void *ptr, size_t old_size, size_t align, size_t new_size);

__attribute__((__weak__, __export_name__("cabi_realloc")))
void *cabi_realloc(void *ptr, size_t old_size, size_t align, size_t new_size) {
  (void) old_size;
  if (new_size == 0) return (void*) align;
  void *ret = realloc(ptr, new_size);
  if (!ret) abort();
  return ret;
}


extern "C" __attribute__((__export_name__("my:app/iface@0.1.0#start")))
int32_t myX3AappX2FifaceX400X2E1X2E0X23start(uint8_t * arg0, size_t arg1)
{
  auto base1 = arg0;
  auto len1 = arg1;
  auto result1 = wit::vector<wit::string>::allocate(len1);
  for (unsigned i=0; i<len1; ++i) {
    auto base = base1 + i * (2*sizeof(void*));
    auto len0 = *((size_t*) (base + sizeof(void*)));

    auto e1 = wit::string((char const*)(*((uint8_t**) (base + 0))), len0);
    result1.initialize(i, std::move(e1));
  }
  auto result2 = exports::my::app::iface::Start(std::move(result1));
  return (int32_t(result2));
}

// Component Adapters
